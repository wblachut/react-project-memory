{"version":3,"sources":["components/Header.js","components/MemoCard.js","App.js","index.js"],"names":["Header","props","className","src","alt","height","highScore","currentScore","CharacterCard","Clicked","onClick","handleClick","id","style","color","width","textAlign","justifyContent","description","image","App","useState","deck","cards","setHighScore","setCurrentScore","cardUsed","setCardUsed","shuffleArray","handleScore","forEach","element","clicked","console","log","shuffle","array","currentIndex","length","randomIndex","Math","floor","random","temporaryValue","map","card","MemoCard","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4gDAmBeA,EAjBA,SAACC,GACZ,OACI,yBAAQC,UAAU,SAAlB,UACI,sBAAKA,UAAU,aAAf,UACM,qBAAKC,IAAI,geAAgeC,IAAI,eAC7eC,OAAO,SACT,qBAAIH,UAAU,WAAd,UAAyB,sBAAMA,UAAU,cAAhB,yBAAzB,8BAEA,gCACI,mBAAGA,UAAU,YAAb,uFACA,gDAFJ,IAEgC,+BAAOD,EAAMK,YAAiB,uBAC1D,oDAHJ,KAGqC,+BAAOL,EAAMM,sBCUnDC,EArBO,SAACP,GACnB,OACI,sBAAKC,UAAW,SAAWD,EAAMQ,QAAU,UAAY,IAAKC,QAAS,kBAAMT,EAAMU,YAAaV,EAAMW,KAApG,UACI,qBAAKV,UAAU,kBAEf,sBAAKA,UAAU,cACPW,MAAO,CACHC,MAAO,QACPC,MAAO,QACPV,OAAQ,QACRW,UAAW,SACXC,eAAgB,UAN5B,UASI,qBAAKb,IAAKH,EAAMiB,YAAaf,IAAKF,EAAMkB,QACvC,uCAAUlB,EAAMiB,sB,OCiElBE,G,MA5EH,WAAO,IAAD,EACAC,mBAASC,GAAlBC,EADS,sBAEkBF,mBAAS,GAF3B,mBAETf,EAFS,KAEEkB,EAFF,OAGwBH,mBAAS,GAHjC,mBAGTd,EAHS,KAGKkB,EAHL,OAIgBJ,oBAAS,GAJzB,mBAITK,EAJS,KAICC,EAJD,KAMVhB,EAAc,SAACC,GACnBgB,IACAC,EAAYjB,IAORiB,EAAc,SAACjB,GACnBW,EAAMO,SAAQ,SAAAC,GACRnB,IAAOmB,EAAQnB,KAA0B,IAApBmB,EAAQC,SAC/BD,EAAQC,SAAU,EAClBL,GAAY,GAPhBF,EAAgBlB,EAAe,IASlBK,IAAOmB,EAAQnB,KAA0B,IAApBmB,EAAQC,UAClCzB,EAAeD,GACjBkB,EAAajB,GAEfkB,EAAgB,GAChBE,GAAY,GACZJ,EAAMO,SAAQ,SAAAC,GAAO,OAAKA,EAAQC,SAAU,KAC5CC,QAAQC,IAAIX,QAKZK,EAAe,WACnBO,EAAQZ,IAIJY,EAAU,SAACC,GAGf,IAFA,IAAIC,EAAeD,EAAME,OAEA,IAAjBD,GAAqB,CAE3B,IAAIE,EAAcC,KAAKC,MAAMD,KAAKE,SAAWL,GAGzCM,EAAiBP,EAFrBC,GAAgB,GAGhBD,EAAMC,GAAgBD,EAAMG,GAC5BH,EAAMG,GAAeI,EAEvB,OAAOP,GAGP,OACE,gCACE,cAAC,EAAD,CACE7B,aAAcA,EACdD,UAAWA,IAEb,qBAAKJ,UAAU,aAAf,SACGqB,EAAMqB,KAAI,SAAAC,GAAI,OACZ,cAACC,EAAD,CACGrC,QAASiB,EACTf,YAAaA,EACbC,GAAIiC,EAAKjC,GAETM,YAAa2B,EAAK3B,YAClBC,MAAO0B,EAAK1B,MACZL,MAAO+B,EAAK/B,OAHP+B,EAAKjC,c,MCjE1BmC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ce147777.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <header className=\"header\" >\r\n            <div className=\"header-row\">\r\n                  <img src=\"https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/aae1113d-6d67-4b9d-9f5a-72c87ee934a7/dcwme31-3a9f6e9c-0d32-4ddf-a619-c016e0ae7024.jpg?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOiIsImlzcyI6InVybjphcHA6Iiwib2JqIjpbW3sicGF0aCI6IlwvZlwvYWFlMTExM2QtNmQ2Ny00YjlkLTlmNWEtNzJjODdlZTkzNGE3XC9kY3dtZTMxLTNhOWY2ZTljLTBkMzItNGRkZi1hNjE5LWMwMTZlMGFlNzAyNC5qcGcifV1dLCJhdWQiOlsidXJuOnNlcnZpY2U6ZmlsZS5kb3dubG9hZCJdfQ.CG-YGB5f1C-pZKcAyyPZkRghaX1CS7yNaxNw06JQLao\" alt=\"witcher-logo\"\r\n                  height=\"80px\"/>\r\n                <h1 className=\"col-sm-8\"><span className=\"the-witcher\">The Witcher</span> Bestiary Memory Game</h1>\r\n            </div>\r\n                <nav>\r\n                    <p className=\"game-info\">Get points by clicking on an image but don't click on any more than once!</p>\r\n                    <strong>Top Score:</strong> <span>{props.highScore}</span><br></br>\r\n                    <strong>Current Score:</strong>  <span>{props.currentScore}</span>\r\n                </nav>\r\n        </header>        \r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from \"react\";\r\n\r\nconst CharacterCard = (props) => {\r\n    return (\r\n        <div className={\"card \" + (props.Clicked ? \"animate\" : \"\")} onClick={() => props.handleClick( props.id)} >  \r\n            <div className=\"img-container\">\r\n            </div>\r\n            <div className=\"img-content\"\r\n                    style={{\r\n                        color: \"white\",\r\n                        width: \"200px\",\r\n                        height: \"200px\",\r\n                        textAlign: \"center\",\r\n                        justifyContent: \"center\",\r\n                        // backgroundColor: props.color,\r\n                      }} >\r\n                <img alt={props.description} src={props.image} />\r\n                 <strong> {props.description}</strong>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default CharacterCard;   ","import React, { useState } from \"react\";\nimport Header from \"./components/Header\";\nimport MemoCard from \"./components/MemoCard\";\nimport deck from \"./deck.json\";\nimport \"./style/App.css\";\n\nconst App = () => {\n  const [cards] = useState(deck)\n  const [highScore, setHighScore] = useState(0)\n  const [currentScore, setCurrentScore] = useState(0)\n  const [cardUsed, setCardUsed] = useState(false)\n\n  const handleClick = (id) => {\n    shuffleArray();\n    handleScore(id);\n  };\n\n  const handleIncrement = () => {\n    setCurrentScore(currentScore + 1);\n  };\n  \n  const handleScore = (id) => {\n    cards.forEach(element => {\n      if (id === element.id && element.clicked === false) {\n        element.clicked = true;\n        setCardUsed(false);\n        handleIncrement();\n      } else if (id === element.id && element.clicked === true) {\n        if (currentScore > highScore) {\n          setHighScore(currentScore);\n        }\n        setCurrentScore(0);\n        setCardUsed(true);\n        cards.forEach(element => (element.clicked = false));\n        console.log(cards);\n      }\n    });\n  };\n\n  const shuffleArray = () => {\n    shuffle(cards);\n  };\n\n  // Function that takes an array as a parameter and shuffles it\n  const shuffle = (array) => {\n    let currentIndex = array.length\n    // While there remain elements to shuffle...\n    while ( currentIndex !== 0 ) {\n      // Pick a remaining element...\n      let randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      // And swap it with the current element.\n      let temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  };\n\n    return (\n      <div>\n        <Header\n          currentScore={currentScore}\n          highScore={highScore}\n        />\n        <div className=\"game-board\">\n          {cards.map(card => (\n             <MemoCard\n                Clicked={cardUsed}\n                handleClick={handleClick}\n                id={card.id}\n                key={card.id}\n                description={card.description}\n                image={card.image}\n                color={card.color}\n            />\n          ))}\n        </div>\n      </div>\n    );\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './style/index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}